@model IEnumerable<WebSandbox.Models.Joke>
@* Quick notes: the @model syntax tells us that the page is dealing with the object Joke. *@
@* the @ also denotes razor synatx, which tastes a bit like C#. *@
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead> @* the head of a table *@
        <tr> @* stands for table row. *@
            <th> @* stands for table header cell. *@
                @{var dJoke = $"Joke {Html.DisplayNameFor(model => model.JokeQuestion).Substring(4)}";}
				@dJoke
				@* this here ^ acts as a string in an element. Cool! *@
				@* Its a pretty complicated function so im gonna break it down: *@
				@* Names are, obviously strings. *@
				@* the generic type (inferred in the above case) of the DisplayNameFor denotes <dataType, returnType> *@
                @* this is then used to ask for a lambda as the parameter to get any data from the dataType supplied. *@
				@* in this specific case, model is a parameter type of Joke in the lambda expression, and JokeQuestion is the string returned. *@

				@* The element after this was supposed to be the answer but I deleted it to make this fun.*@
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) { @* pretty standard foreach in a html file. pretty cool! *@
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.JokeQuestion)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.ID">Details (Click for the punchline!)</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
